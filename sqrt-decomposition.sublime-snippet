<snippet>
	<content><![CDATA[
//****************************Template Begins****************************//

// Header Files
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<vector>
#include<utility>
#include<set>
#include<unordered_set>
#include<list>
#include<iterator>
#include<deque>
#include<queue>
#include<stack>
#include<set>
#include<bitset>
#include<random>
#include<map>
#include<unordered_map>
#include<stdio.h>
#include<complex>
#include<math.h>
#include<cstring>
#include<chrono>
#include<string>
// Header Files End

using namespace std;
#define DIVYA ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define umap unordered_map
#define uset unordered_set
#define lb lower_bound
#define ub upper_bound
#define fo(i,a,b) for(i=a;i<=b;i++)
#define all(v) (v).begin(),(v).end()
#define all1(v) (v).begin()+1,(v).end()
#define allr(v) (v).rbegin(),(v).rend()
#define allr1(v) (v).rbegin()+1,(v).rend()
#define sort0(v) sort(all(v))
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<ll, ll> pll;
#define max3(a,b,c) max(max((a),(b)),(c))
#define max4(a,b,c,d) max(max((a),(b)),max((c),(d)))
#define min3(a,b,c) min(min((a),(b)),(c))
#define min4(a,b,c,d) min(min((a),(b)),min((c),(d)))
#define pb push_back
#define ppb pop_back
#define mkp make_pair
#define inf 9999999999999
const ll mod = 1e9 + 7;

ll inv(ll i) {if (i == 1) return 1; return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;}

ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}

ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}

ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}

ll ceil_div(ll a, ll b) {return a % b == 0 ? a / b : a / b + 1;}

ll pwr(ll a, ll b) {a %= mod; ll res = 1; while (b > 0) {if (b & 1) res = res * a % mod; a = a * a % mod; b >>= 1;} return res;}
//****************************Template Ends*******************************//

// this template calculates the number of distinct elements in l....r
// change the data structure as required to calculate other stuff
const ll sz = 700;
ll curr_ans;
vll cnt(1000005, 0);
struct query {
    ll l;
    ll r;
    ll lb;
    ll rb;
    ll id;
};
bool cmp(query a, query b)
{
    return (a.lb < b.lb or (a.lb == b.lb and ( (a.lb & 1) ?  a.r < b.r : a.r > b.r)));
}
void add_element(ll n)
{
    if (cnt[n] == 0)
    {
        curr_ans++;
    }
    cnt[n]++;
}
void remove_element(ll n)
{
    if (cnt[n] == 1)curr_ans--;
    cnt[n]--;
}
int main() {
    DIVYA;
#ifndef ONLINE_JUDGE
    freopen("input.txt" , "r" , stdin);
    freopen("output.txt", "w", stdout);
#endif
    ll t, n, i, j, ans, temp, sum, q, u, v;
    string sans;
    t = 1;
    // cin >> t;
    while (t--)
    {
        sans = "NO";
        ans = temp = sum = 0;
        cin >> n;
        vll a(n + 1, 0);
        fo(i, 1, n)
        {
            cin >> a[i];
        }
        cin >> q;
        vector<query>Q(q + 1);
        fo(i, 1, q)
        {
            cin >> u >> v;
            Q[i].id = i;
            Q[i].l = u;
            Q[i].r = v;
            Q[i].lb = u / sz;
            Q[i].rb = v / sz;
        }
        sort(Q.begin() + 1, Q.end(), cmp);
        ll left, right;
        left = 0;
        right = 0;
        vll ansvec(q + 1);
        fo(i, 1, q)
        {
            while (right < Q[i].r)
            {
                right++;
                add_element(a[right]);
            }
            while (left > Q[i].l)
            {
                left--;
                add_element(a[left]);
            }
            while (right > Q[i].r)
            {
                remove_element(a[right]);
                right--;
            }
            while (left < Q[i].l)
            {
                if(left != 0)remove_element(a[left]);
                left++;
            }
            ansvec[Q[i].id] = curr_ans;
        }
        fo(i, 1, q)cout << ansvec[i] << "\n";
    }
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sqrt-decomposition</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
