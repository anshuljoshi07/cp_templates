<snippet>
	<content><![CDATA[
//****************************Template Begins****************************//

// Header Files
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<vector>
#include<utility>
#include<set>
#include<unordered_set>
#include<list>
#include<iterator>
#include<deque>
#include<queue>
#include<stack>
#include<set>
#include<bitset>
#include<random>
#include<map>
#include<unordered_map>
#include<stdio.h>
#include<complex>
#include<math.h>
#include<cstring>
#include<chrono>
#include<string>
// #include "ext/pb_ds/assoc_container.hpp"
// #include "ext/pb_ds/tree_policy.hpp"
// Header Files End

using namespace std;
// using namespace __gnu_pbds;
// template<class T>
// using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;

// template<class key, class value, class cmp = std::less<key>>
// using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

#define DIVYA ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define umap unordered_map
#define uset unordered_set
#define lb lower_bound
#define ub upper_bound
#define fo(i,a,b) for(i=a;i<=b;i++)
#define all(v) (v).begin(),(v).end()
#define all1(v) (v).begin()+1,(v).end()
#define allr(v) (v).rbegin(),(v).rend()
#define allr1(v) (v).rbegin()+1,(v).rend()
#define sort0(v) sort(all(v))
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<ll, ll> pll;
#define max3(a,b,c) max(max((a),(b)),(c))
#define max4(a,b,c,d) max(max((a),(b)),max((c),(d)))
#define min3(a,b,c) min(min((a),(b)),(c))
#define min4(a,b,c,d) min(min((a),(b)),min((c),(d)))
#define pb push_back
#define ppb pop_back
#define mkp make_pair
#define inf 1000000000000000005
const ll mod = 1e9 + 7;

ll inv(ll i) {if (i == 1) return 1; return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;}

ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}

ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}

ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}

ll ceil_div(ll a, ll b) {return a % b == 0 ? a / b : a / b + 1;}

ll pwr(ll a, ll b) {a %= mod; ll res = 1; while (b > 0) {if (b & 1) res = res * a % mod; a = a * a % mod; b >>= 1;} return res;}
//****************************Template Ends*******************************//
// this template is for path sum queries(from root to s)
vector<vll>adj;
vll order;
vll label;
vll big_child;
vll parent;
vll top_node;
vll depth;
vll sz;
vll a;
ll curr_label;
vll tree;
void build(ll v, ll tl, ll tr) {
    if (tl == tr) {
        //change this 0 to the leaf value
        tree[v] = a[order[tl]];
        return;
    }
    if (tl > tr) return;
    ll m = (tl + tr) / 2;
    build(2 * v, tl, m);
    build(2 * v + 1, m + 1, tr);
    tree[v] = tree[2 * v] + tree[2 * v + 1];
}

ll range(ll v, ll tl, ll tr, ll l, ll r) {
    if (tl == l && tr == r) return tree[v];
    if (l > r) return 0;
    ll tm = (tl + tr) / 2;
    return range(2 * v, tl, tm, l, min(r, tm)) + range(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);
}

void pupdate(ll v, ll tl, ll tr, ll ind, ll val) {
    if (tl == tr) {
        tree[v] = val;
        return;
    }
    ll tm = (tl + tr) / 2;
    if (ind <= tm) pupdate(v * 2, tl, tm, ind, val);
    else pupdate(v * 2 + 1, tm + 1, tr, ind, val);
    tree[v] = tree[v * 2] + tree[v * 2 + 1];
}

void dfs1(ll curr_node, ll par)
{
    sz[curr_node] = 1;
    ll bigc, bigv;
    bigc = -1;
    bigv = -inf;
    for (auto x : adj[curr_node])
    {
        if (x == par)continue;
        depth[x] = 1 + depth[curr_node];
        parent[x] = curr_node;
        dfs1(x, curr_node);
        sz[curr_node] += sz[x];
        if (sz[x] > bigv)
        {
            bigv = sz[x];
            bigc = x;
        }
    }
    big_child[curr_node] = bigc;
}

void dfs2(ll curr_node, ll par)
{
    label[curr_node] = curr_label;
    order[curr_label] = curr_node;
    curr_label++;
    if (big_child[curr_node] != -1)
    {
        top_node[big_child[curr_node]] = top_node[curr_node];
        dfs2(big_child[curr_node], curr_node);
    }
    for (auto x : adj[curr_node])
    {
        if (x == par or x == big_child[curr_node])continue;
        dfs2(x, curr_node);
    }
}

int main() {
    DIVYA;
#ifndef ONLINE_JUDGE
    freopen("input.txt" , "r" , stdin);
    freopen("output.txt", "w", stdout);
#endif
    ll t, n, i, j, ans, temp, sum, q, u, v, x1, x2;
    string sans;
    t = 1;
    // cin >> t;
    while (t--)
    {
        sans = "NO";
        ans = temp = sum = 0;
        cin >> n >> q;
        tree.resize(4 * (n + 2));
        depth.assign(n + 1, 0);
        order.resize(n + 1); // it is an ordering of nodes so that every heavy chain is a contiguous segment in this ordering
        label.assign(n + 1, -1); // it stores the index of a node in the order array
        top_node.assign(n + 1, -1); //it stores top node of the heavy chain to which i'th node belongs
        curr_label = 1;
        adj.assign(n + 1, {});
        big_child.assign(n + 1, -1);
        parent.assign(n + 1, -1);
        sz.assign(n + 1, -1);
        a.assign(n + 1, 0);
        fo(i, 1, n)
        {
            top_node[i] = i;
        }
        fo(i, 1, n)
        {
            cin >> a[i];
        }
        fo(i, 1, n - 1)
        {
            cin >> u >> v;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        dfs1(1, -1); //this dfs is done to carry out the decomposition
        dfs2(1, -1); //this dfs is done to compute the label and order arrays
        build(1, 1, n);
        while (q--)
        {
            ll num;
            cin >> num;
            if (num == 1)
            {
                cin >> u >> v;
                pupdate(1, 1, n, label[u], v);
            }
            else
            {
                u = 1;
                cin >> v;
                ans = 0;
                while (1)
                {
                    x1 = top_node[u];
                    x2 = top_node[v];
                    if (x1 == x2)
                    {
                        ans += range(1, 1, n, min(label[u], label[v]), max(label[u], label[v]));
                        break;
                    }
                    if (depth[x1] >= depth[x2])
                    {
                        ans += range(1, 1, n, label[x1], label[u]);
                        u = parent[x1];
                    }
                    else
                    {
                        ans += range(1, 1, n, label[x2], label[v]);
                        v = parent[x2];
                    }
                }
                cout << ans << "\n";
            }
        }
    }
    return 0;
}














]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hld</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
