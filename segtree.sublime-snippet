<snippet>
	<content><![CDATA[

template<class T>
struct Segtree{
    vector<T>st;
    ll n;
    T identity_element;
    Segtree(ll n, T identity_element)
    {
        this->n = n;
        this->identity_element = identity_element;
        st.assign(4*n,identity_element);
    }
    T combine(T l, T r)
    {
        // change this function as required.
        T ans = l + r;
        return ans;
    }
    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)
    {
        if(tl == tr)
        {
            st[v] = a[tl];
            return;
        }
        ll tm = (tl + tr)>>1;
        buildUtil(2*v + 1, tl, tm,a);
        buildUtil(2*v + 2,tm+1,tr,a);
        st[v] = combine(st[2*v + 1], st[2*v + 2]);
    }
    void build(vector<T>a)
    {
        assert(sz(a) == n);
        buildUtil(0,0,n-1,a);
    }
    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)
    {
        if(l > r)return identity_element;
        if(r < tl or l > tr)
        {
            return identity_element;
        }
        if(tl >= l and tr <= r)
        {
            return st[v];
        }
        ll tm = (tl + tr)>>1;
        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));
    }
    T query(ll l, ll r)
    {
        return queryUtil(0,0,n-1,l,r);
    }
    T apply(T curr, ll val)
    {
        // change this function if update is of some other kind.
        T ans = curr;
        ans = val;
        return ans;
    }
    void updateUtil(ll v, ll tl, ll tr, ll ind, ll val)
    {
        if(tl == tr)
        {
            st[v] = apply(st[v],val);
            return;
        }        
        ll tm = (tl + tr)>>1;
        if(ind <= tm)
        {
            updateUtil(2*v+1,tl,tm,ind,val);
        }
        else
        {
            updateUtil(2*v+2,tm+1,tr,ind,val);
        }
        st[v] = combine(st[2*v + 1], st[2*v+2]);
    }
    void update(ll ind, ll val)
    {
        updateUtil(0,0,n-1,ind,val);
    }
};



]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
