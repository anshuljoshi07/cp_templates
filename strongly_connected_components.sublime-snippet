<snippet>
	<content><![CDATA[
//****************************Template Begins****************************//

// Header Files
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<vector>
#include<utility>
#include<set>
#include<unordered_set>
#include<list>
#include<iterator>
#include<deque>
#include<queue>
#include<stack>
#include<set>
#include<bitset>
#include<random>
#include<map>
#include<unordered_map>
#include<stdio.h>
#include<complex>
#include<math.h>
#include<cstring>
#include<chrono>
#include<string>
// Header Files End

using namespace std;
#define DIVYA ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define umap unordered_map
#define uset unordered_set
#define lb lower_bound
#define ub upper_bound
#define fo(i,a,b) for(i=a;i<=b;i++)
#define all(v) (v).begin(),(v).end()
#define all1(v) (v).begin()+1,(v).end()
#define allr(v) (v).rbegin(),(v).rend()
#define allr1(v) (v).rbegin()+1,(v).rend()
#define sort0(v) sort(all(v))
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<ll, ll> pll;
#define max3(a,b,c) max(max((a),(b)),(c))
#define max4(a,b,c,d) max(max((a),(b)),max((c),(d)))
#define min3(a,b,c) min(min((a),(b)),(c))
#define min4(a,b,c,d) min(min((a),(b)),min((c),(d)))
#define pb push_back
#define ppb pop_back
#define mkp make_pair
#define inf 9999999999999
const ll mod = 1e9 + 7;

ll inv(ll i) {if (i == 1) return 1; return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;}

ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}

ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}

ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}

ll ceil_div(ll a, ll b) {return a % b == 0 ? a / b : a / b + 1;}

ll pwr(ll a, ll b) {a %= mod; ll res = 1; while (b > 0) {if (b & 1) res = res * a % mod; a = a * a % mod; b >>= 1;} return res;}
//****************************Template Ends*******************************//
vector<vll>adj;
vector<vll>adj_rev;
vector<vll>adj_cond;
vector<bool>visited;
vll topo;
vll component;
void gen_topo(ll curr_node)
{
    visited[curr_node] = true;
    for (auto x : adj[curr_node])
    {
        if (visited[x])continue;
        gen_topo(x);
    }
    topo.pb(curr_node);
}

void dfs(ll curr_node)
{
    visited[curr_node] = true;
    component.pb(curr_node);
    for (auto x : adj_rev[curr_node])
    {
        if (visited[x])continue;
        dfs(x);
    }
}


int main() {
    DIVYA;
#ifndef ONLINE_JUDGE
    freopen("input.txt" , "r" , stdin);
    freopen("output.txt", "w", stdout);
#endif
    ll t, n, i, j, ans, temp, sum, m, u, v;
    string sans;
    t = 1;
    cin >> t;
    while (t--)
    {
        sans = "NO";
        ans = temp = sum = 0;
        cin >> n >> m;
        adj.assign(n + 1, {});
        adj_rev.assign(n + 1, {});
        adj_cond.assign(n + 1, {});
        visited.assign(n + 1, false);
        topo.clear();
        fo(i, 1, m)
        {
            cin >> u >> v;
            adj[u].pb(v);
            adj_rev[v].pb(u);
        }
        fo(i, 1, n)
        {
            if (!visited[i])
            {
                gen_topo(i);
            }
        }
        reverse(all(topo));
        visited.assign(n + 1, false);
        vll id(n + 1, 0);
        vll all_ids;
        for (auto x : topo)
        {
            if (!visited[x])
            {
                component.clear();
                dfs(x);
                for (auto y : component)
                {
                    id[y] = component[0];
                }
                all_ids.pb(component[0]);
            }
        }
        fo(i, 1, n)
        {
            for (auto x : adj[i])
            {
                if (id[i] != id[x])
                {
                    adj_cond[id[i]].pb(id[x]);
                }
            }
        }
    }
    return 0;
}














]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>strongly_connected_components</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
